Adapter (Wrapper):
	"Convertir la interfaz de una clase en otra interfaz que el cliente espera. 
	Adapter consigue que trabajen juntas clases que de otro modo no podrían.”
	:::	java.util.Arrays#asList()
		java.io.InputStreamReader(InputStream) (devuelve un Reader)
		java.io.OutputStreamWriter(OutputStream) (devuelve un Writer)
		javax.xml.bind.annotation.adapters.XmlAdapter#marshal()
		javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()
Facade:
	“Proporcionar una interfaz unificada a otro conjunto de interfaces de un subsistema.
	Façade define una interfaz de más alto nivel que hace que el subsistema más fácil de usar.”
	::: Cálculo del riesgo financiero de un cliente de un banco a la hora de concederle una hipoteca o un crédito. 
	Un patrón Facade se encargaría aquí de conectar con todos los subsistemas implicados (créditos, ahorros, impagos) 
	y realizar un cálculo que proporcione este tipo de información.
Decorator:
	“Añadir responsabilidades a un objeto de forma dinámica. 
	Los decoradores proporcionan una alternativa flexible a la herencia para extender funcionalidad.”
	Ocupan mucha memoria.
	::: La clase InputStream actuaría como la clase base abstracta, 
	clases como: FileInputStream, StringBufferInputStream y ByteArrayInputStream actuarían como clases concretas, 
	FilterInputStream actuaría como la clase abstracta de la que heredan todos los decoradores
	y clases como BufferedInputStream, DataInputStream o LineNumberInputStream actuarían como decoradores, 
	recibiendo un objeto de la clase InputStream como parámetro en su constructor.
Bridge:
	“Desacoplar una abstracción de su implementación de modo que los dos puedan ser modificados de forma independiente.”
	:::  Este funcionamiento puede observarse en los paquetes de java java.awt y java.awt.peer.
Flyweight:
	“Compartir una parte común del estado de un objeto para hacer más eficiente la gestión 
	de un número elevado de objetos de grano más fino.”
	::: Al exportar datos a Excel, sería posible almacenar como objetos implícitos los estilos de las celdas, 
	referenciándolos únicamente cuando se vayan a utilizar y evitando duplicar la información asociada a ellos.
	La clase Integer de Java hace uso de esta técnica para encapsular el tipo primitivo int,
	usando elementos flyweight para representar los índices entre -128 y 127 (los más utilizados). 
	En caso de no hacer uso de esta técnica, un elemento Integer ocuparía, como podríamos imaginar,
	una cantidad enorme de memoria.
Composite:
	“Componer objetos en árboles para representar jerarquías todo-parte.
	Composite permite a los clientes tratar objetos individuales y objetos compuestos de una manera uniforme”.
	::: Finalmente, la estructura de ficheros y directorios de un sistema de archivos
	también actúa en consonancia con este patrón.
	Un ejemplo del concepto de la jerarquía que se pretende modelar sería el de los menús de una aplicación:
Proxy:
	“Proporcionar un sustituto o intermediario para otro objeto de modo
	que pueda controlarse el acceso que se tiene hacia él”.
	::: RMI java.
	Las pantallas de carga de ciertas aplicaciones. En este caso, se tratará de un Proxy Virtual, 
	que mostrará el típico mensaje de “Cargando” mientras recupera la información solicitada por el usuario, 
	sobreescribiendo el mensaje una vez que la petición al objeto real ha concluido.

	
	